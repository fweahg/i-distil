#version 320 es

//shader from shader toy a bit modified for perf 
//work with shader editor by markusfisher on android 

precision highp float;

uniform vec2 resolution;
uniform float time;
uniform vec2 touch;

uniform float startRandom;

out vec4 gl_FragColor;

const float pi = 3.141592;

const float cloudscale = 1.1;
const float speed = 0.005;		// 0.03
const float clouddark = 0.4;
const float cloudlight = 0.3;
const float cloudcover = 0.2;
const float cloudalpha = 8.0;
const float skytint = 0.5;
const vec3 skycolour1 = vec3(0.2, 0.4, 0.6);
const vec3 skycolour2 = vec3(0.4, 0.7, 1.0);

const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );

const float K1 = 0.366025404; // (sqrt(3)-1)/2;
const float K2 = 0.211324865; // (3-sqrt(3))/6;

const float seed = 43758.5453123;

vec2 hash( vec2 p ) {
	p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
	vec2 ret = -1.0 + 2.0*fract(sin(p)* seed);//sin
	return ret;
}

float noise( in vec2 p ) {
	  vec2 i = floor(p + (p.x+p.y)*K1);
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);
    //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
	  vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	  vec3 n = h*h*h*h*vec3(
	  	dot(a,hash(i+0.0)),
	  	dot(b,hash(i+o  )),
	  	dot(c,hash(i+1.0)) );

    return dot(n, vec3(70.0));
}

float fbm(vec2 n, mat2 mat) {
	float total = 0.0, amplitude = 0.1;
	for (int i = 0; i < 5; i++) {
		total += noise(n) * amplitude;
		n = mat * n;
		amplitude *= 0.4;
	}

	return total;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {

		float a = (-1. + 2. * touch.x/resolution.x) * pi + time * speed * (-1. + 2. * touch.y/resolution.y);
		mat2 mt = m * mat2(cos(a),-sin(a),sin(a),cos(a));

    vec2 p = fragCoord.xy / resolution.xy;
	  vec2 uv1, uv2 ,uv3, uv4;

	  vec2 uv = p*vec2(resolution.x/resolution.y,1.0);
    float q = fbm(uv * cloudscale * 0.5, mt);

    float timer1 = startRandom + time * speed; // shape
    float timer2 = startRandom + time * speed * 2.0; //color
    float timer3 = startRandom + time * speed * 3.0; //color ridge

	  float r = 0.0;
	  float f = 0.0;
	  float c = 0.0;
	  float c1 = 0.0;

	  uv1 = p*vec2(resolution.x/resolution.y,1.0);
	  uv1 *= cloudscale * .97;
    uv1 -= q - timer1;

    uv2 = p*vec2(resolution.x/resolution.y,1.0);
	  uv2 *= cloudscale;
    uv2 -= q - timer1;

    uv3 = p*vec2(resolution.x/resolution.y,1.0);
	  uv3 *= cloudscale*2.0;
    uv3 -= q - timer2;

    uv4 = p*vec2(resolution.x/resolution.y,1.0);
	  uv4 *= cloudscale*3.0;
    uv4 -= q - timer3;

    float weight1 = 0.8; //0.8
    float weight2 = 0.7;
    float weight3 = 0.4;
    float weight4 = 0.4;

    for (int i=0; i<6; i++){// i<8

      //ridged noise shape
		  r += abs(weight1 * noise( uv1 ));
      uv1 = mt * uv1 + timer1;//mt
		  weight1 *= 0.7;

		  //noise shape
		  f += weight2 * noise( uv2 );
      uv2 = mt * uv2 + timer1;//mt
		  weight2 *= 0.6;


		  //noise colour
		  c += weight3 * noise( uv3 );
      uv3 = mt * uv3 + timer2;//mt
		  weight3 *= 0.6;

		  //noise ridge colour
		  c1 += abs(weight4 * noise( uv4 ));
      uv4 = mt * uv4 + timer3;//mt
		  weight4 *= 0.6;
    }

    f *= r + f;
    f = cloudcover + cloudalpha * f * r;

    c += c1 -.20;

		vec3 skycolour = mix(skycolour2, skycolour1, p.y);
    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) *
    	clamp((clouddark + cloudlight * c), 0.0, 1.0);

    //f = cloudcover + cloudalpha*f*r;

    vec3 result = mix(
    	skycolour,
    	clamp(skytint * skycolour + cloudcolour, 0.0, 1.0),
    	clamp(f + c, 0.0, 1.0));

	fragColor = vec4( result, 1.0 );
}

void main() {
	vec4 fragment_color;

	mainImage(fragment_color, gl_FragCoord.xy);

	gl_FragColor = fragment_color;
}
